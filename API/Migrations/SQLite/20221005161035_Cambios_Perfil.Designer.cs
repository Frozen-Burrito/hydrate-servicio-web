// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ServicioHydrate.Data;

#nullable disable

namespace ServicioHydrate.Migrations.SQLite
{
    [DbContext(typeof(ContextoDBSqlite))]
    [Migration("20221005161035_Cambios_Perfil")]
    partial class Cambios_Perfil
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "6.0.3");

            modelBuilder.Entity("ComentarioUsuario", b =>
                {
                    b.Property<int>("ComentariosReportadosId")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("ReportesDeUsuariosId")
                        .HasColumnType("TEXT");

                    b.HasKey("ComentariosReportadosId", "ReportesDeUsuariosId");

                    b.HasIndex("ReportesDeUsuariosId");

                    b.ToTable("ComentariosReportados", (string)null);
                });

            modelBuilder.Entity("ComentarioUsuario1", b =>
                {
                    b.Property<int>("ComentariosUtilesId")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("UtilParaUsuariosId")
                        .HasColumnType("TEXT");

                    b.HasKey("ComentariosUtilesId", "UtilParaUsuariosId");

                    b.HasIndex("UtilParaUsuariosId");

                    b.ToTable("ComentariosUtiles", (string)null);
                });

            modelBuilder.Entity("EntornoPerfil", b =>
                {
                    b.Property<int>("EntornosDesbloqueadosId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PerfilesQueDesbloquearonId")
                        .HasColumnType("INTEGER");

                    b.HasKey("EntornosDesbloqueadosId", "PerfilesQueDesbloquearonId");

                    b.HasIndex("PerfilesQueDesbloquearonId");

                    b.ToTable("EntornosDesbloqueados", (string)null);
                });

            modelBuilder.Entity("EtiquetaMetaHidratacion", b =>
                {
                    b.Property<int>("EtiquetasId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("EtiquetasIdPerfil")
                        .HasColumnType("INTEGER");

                    b.Property<int>("MetasId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("MetasIdPerfil")
                        .HasColumnType("INTEGER");

                    b.HasKey("EtiquetasId", "EtiquetasIdPerfil", "MetasId", "MetasIdPerfil");

                    b.HasIndex("MetasId", "MetasIdPerfil");

                    b.ToTable("EtiquetasDeMetas", (string)null);
                });

            modelBuilder.Entity("RespuestaUsuario", b =>
                {
                    b.Property<int>("RespuestasUtilesId")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("UtilParaUsuariosId")
                        .HasColumnType("TEXT");

                    b.HasKey("RespuestasUtilesId", "UtilParaUsuariosId");

                    b.HasIndex("UtilParaUsuariosId");

                    b.ToTable("RespuestasUtiles", (string)null);
                });

            modelBuilder.Entity("RespuestaUsuario1", b =>
                {
                    b.Property<Guid>("ReportesDeUsuariosId")
                        .HasColumnType("TEXT");

                    b.Property<int>("RespuestasReportadasId")
                        .HasColumnType("INTEGER");

                    b.HasKey("ReportesDeUsuariosId", "RespuestasReportadasId");

                    b.HasIndex("RespuestasReportadasId");

                    b.ToTable("RespuestasReportadas", (string)null);
                });

            modelBuilder.Entity("ServicioHydrate.Modelos.Comentario", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Asunto")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("AutorId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Contenido")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("TEXT");

                    b.Property<string>("Fecha")
                        .HasMaxLength(33)
                        .HasColumnType("TEXT");

                    b.Property<bool>("NecesitaModificaciones")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Publicado")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("AutorId");

                    b.ToTable("Comentarios");
                });

            modelBuilder.Entity("ServicioHydrate.Modelos.ComentarioArchivado", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Fecha")
                        .HasMaxLength(33)
                        .HasColumnType("TEXT");

                    b.Property<int>("IdComentario")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Motivo")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("ComentariosArchivados");
                });

            modelBuilder.Entity("ServicioHydrate.Modelos.Configuracion", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<bool>("AportaDatosAbiertos")
                        .HasColumnType("INTEGER");

                    b.Property<string>("CodigoLocalizacion")
                        .HasMaxLength(10)
                        .HasColumnType("TEXT");

                    b.Property<bool>("FormulariosRecurrentesActivados")
                        .HasColumnType("INTEGER");

                    b.Property<string>("IdDispositivo")
                        .HasMaxLength(17)
                        .HasColumnType("TEXT");

                    b.Property<int>("IdPerfil")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IntegradoConGoogleFit")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PreferenciasDeNotificaciones")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TemaDeColor")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("IdPerfil")
                        .IsUnique();

                    b.ToTable("Configuracion");
                });

            modelBuilder.Entity("ServicioHydrate.Modelos.Datos.DatosMedicos", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("INTEGER");

                    b.Property<int>("IdPerfil")
                        .HasColumnType("INTEGER");

                    b.Property<float>("AguaExtracelular")
                        .HasColumnType("REAL");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("FechaProxCita")
                        .HasColumnType("TEXT");

                    b.Property<float>("GananciaReal")
                        .HasColumnType("REAL");

                    b.Property<float>("GananciaRegistrada")
                        .HasColumnType("REAL");

                    b.Property<float>("Hipervolemia")
                        .HasColumnType("REAL");

                    b.Property<float>("Normovolemia")
                        .HasColumnType("REAL");

                    b.Property<float>("PesoPostDialisis")
                        .HasColumnType("REAL");

                    b.HasKey("Id", "IdPerfil");

                    b.HasIndex("IdPerfil");

                    b.ToTable("DatosMedicos");
                });

            modelBuilder.Entity("ServicioHydrate.Modelos.Datos.Etiqueta", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("INTEGER");

                    b.Property<int>("IdPerfil")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Valor")
                        .HasMaxLength(16)
                        .HasColumnType("TEXT");

                    b.HasKey("Id", "IdPerfil");

                    b.HasIndex("IdPerfil");

                    b.ToTable("Etiquetas");
                });

            modelBuilder.Entity("ServicioHydrate.Modelos.Datos.MetaHidratacion", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("INTEGER");

                    b.Property<int>("IdPerfil")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CantidadEnMl")
                        .HasColumnType("INTEGER")
                        .HasColumnName("CantidadMl");

                    b.Property<DateTime>("FechaInicio")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("FechaTermino")
                        .HasColumnType("TEXT");

                    b.Property<string>("Notas")
                        .HasMaxLength(300)
                        .HasColumnType("TEXT");

                    b.Property<int>("Plazo")
                        .HasColumnType("INTEGER");

                    b.Property<int>("RecompensaDeMonedas")
                        .HasColumnType("INTEGER")
                        .HasColumnName("RecomensaMonedas");

                    b.HasKey("Id", "IdPerfil");

                    b.HasIndex("IdPerfil");

                    b.ToTable("Metas");
                });

            modelBuilder.Entity("ServicioHydrate.Modelos.Datos.RegistroDeActividad", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("INTEGER");

                    b.Property<int>("IdPerfil")
                        .HasColumnType("INTEGER");

                    b.Property<double>("Distancia")
                        .HasColumnType("REAL");

                    b.Property<int>("Duracion")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("EsInformacionAbierta")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("Fecha")
                        .HasColumnType("TEXT");

                    b.Property<bool>("FueAlAireLibre")
                        .HasColumnType("INTEGER");

                    b.Property<int>("IdTipoDeActividad")
                        .HasColumnType("INTEGER");

                    b.Property<int>("KcalQuemadas")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Titulo")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("TEXT");

                    b.HasKey("Id", "IdPerfil");

                    b.HasIndex("IdPerfil");

                    b.HasIndex("IdTipoDeActividad");

                    b.ToTable("RegistrosDeActFisica");
                });

            modelBuilder.Entity("ServicioHydrate.Modelos.Datos.RegistroDeHidratacion", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("INTEGER");

                    b.Property<int>("IdPerfil")
                        .HasColumnType("INTEGER")
                        .HasColumnName("IdPerfil");

                    b.Property<int>("CantidadEnMl")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("EsInformacionAbierta")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("Fecha")
                        .HasColumnType("TEXT");

                    b.Property<int>("PorcentajeCargaBateria")
                        .HasColumnType("INTEGER");

                    b.Property<double>("TemperaturaAproximada")
                        .HasColumnType("REAL");

                    b.HasKey("Id", "IdPerfil");

                    b.HasIndex("IdPerfil");

                    b.ToTable("RegistrosDeHidratacion");
                });

            modelBuilder.Entity("ServicioHydrate.Modelos.Datos.ReporteSemanal", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("INTEGER");

                    b.Property<int>("IdPerfil")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("Fecha")
                        .HasColumnType("TEXT");

                    b.Property<double>("HorasDeActividadFisica")
                        .HasColumnType("REAL");

                    b.Property<double>("HorasDeOcupacion")
                        .HasColumnType("REAL");

                    b.Property<double>("HorasDeSuenio")
                        .HasColumnType("REAL");

                    b.Property<double>("TemperaturaMaxima")
                        .HasColumnType("REAL");

                    b.HasKey("Id", "IdPerfil");

                    b.HasIndex("IdPerfil");

                    b.ToTable("ReporteSemanal");
                });

            modelBuilder.Entity("ServicioHydrate.Modelos.Datos.Rutina", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("INTEGER");

                    b.Property<int>("IdPerfil")
                        .HasColumnType("INTEGER")
                        .HasColumnName("IdPerfil");

                    b.Property<int>("DiasDeOcurrencia")
                        .HasColumnType("INTEGER");

                    b.Property<TimeOnly>("Hora")
                        .HasColumnType("TEXT");

                    b.Property<int>("IdActividad")
                        .HasColumnType("INTEGER")
                        .HasColumnName("IdRegistroActividad");

                    b.HasKey("Id", "IdPerfil");

                    b.HasIndex("IdPerfil");

                    b.HasIndex("IdActividad", "IdPerfil")
                        .IsUnique();

                    b.ToTable("RutinasDeActFisica");
                });

            modelBuilder.Entity("ServicioHydrate.Modelos.Datos.TipoDeActividad", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("IdActividadGoogleFit")
                        .HasColumnType("INTEGER");

                    b.Property<double>("METs")
                        .HasColumnType("REAL");

                    b.Property<double>("VelocidadPromedioKMH")
                        .HasColumnType("REAL");

                    b.HasKey("Id");

                    b.ToTable("TiposDeActividad");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            IdActividadGoogleFit = 7,
                            METs = 4.2999999999999998,
                            VelocidadPromedioKMH = 5.0
                        },
                        new
                        {
                            Id = 2,
                            IdActividadGoogleFit = 8,
                            METs = 7.0,
                            VelocidadPromedioKMH = 8.0
                        },
                        new
                        {
                            Id = 3,
                            IdActividadGoogleFit = 1,
                            METs = 7.5,
                            VelocidadPromedioKMH = 11.0
                        },
                        new
                        {
                            Id = 4,
                            IdActividadGoogleFit = 82,
                            METs = 9.8000000000000007,
                            VelocidadPromedioKMH = 0.0
                        },
                        new
                        {
                            Id = 5,
                            IdActividadGoogleFit = 29,
                            METs = 7.0,
                            VelocidadPromedioKMH = 0.0
                        },
                        new
                        {
                            Id = 6,
                            IdActividadGoogleFit = 12,
                            METs = 6.5,
                            VelocidadPromedioKMH = 0.0
                        },
                        new
                        {
                            Id = 7,
                            IdActividadGoogleFit = 89,
                            METs = 4.0,
                            VelocidadPromedioKMH = 0.0
                        },
                        new
                        {
                            Id = 8,
                            IdActividadGoogleFit = 24,
                            METs = 7.7999999999999998,
                            VelocidadPromedioKMH = 0.0
                        },
                        new
                        {
                            Id = 9,
                            IdActividadGoogleFit = 100,
                            METs = 1.3,
                            VelocidadPromedioKMH = 0.0
                        });
                });

            modelBuilder.Entity("ServicioHydrate.Modelos.Entorno", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("PrecioEnMonedas")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UrlImagen")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Entornos");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            PrecioEnMonedas = 0,
                            UrlImagen = "1"
                        },
                        new
                        {
                            Id = 2,
                            PrecioEnMonedas = 250,
                            UrlImagen = "2"
                        });
                });

            modelBuilder.Entity("ServicioHydrate.Modelos.LlaveDeApi", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("ErroresEnMes")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("FechaDeCreacion")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("IdUsuario")
                        .HasColumnType("TEXT");

                    b.Property<string>("Llave")
                        .HasColumnType("TEXT");

                    b.Property<string>("NombreDelCliente")
                        .HasColumnType("TEXT");

                    b.Property<int>("PeticionesEnMes")
                        .HasColumnType("INTEGER");

                    b.Property<int>("RolDeAcceso")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("IdUsuario");

                    b.ToTable("LlavesDeAPI");
                });

            modelBuilder.Entity("ServicioHydrate.Modelos.Orden", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("ClienteId")
                        .HasColumnType("TEXT");

                    b.Property<int>("Estado")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Fecha")
                        .HasMaxLength(33)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ClienteId");

                    b.ToTable("Ordenes");
                });

            modelBuilder.Entity("ServicioHydrate.Modelos.Pais", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Codigo")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Paises");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Codigo = "--"
                        },
                        new
                        {
                            Id = 2,
                            Codigo = "MX"
                        },
                        new
                        {
                            Id = 3,
                            Codigo = "USA"
                        });
                });

            modelBuilder.Entity("ServicioHydrate.Modelos.Perfil", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Apellido")
                        .HasColumnType("TEXT");

                    b.Property<int>("CantidadMonedas")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CondicionMedica")
                        .HasColumnType("INTEGER");

                    b.Property<double>("Estatura")
                        .HasColumnType("REAL");

                    b.Property<DateTime>("FechaDeCreacion")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("FechaDeModificacion")
                        .HasColumnType("TEXT");

                    b.Property<string>("FechaNacimiento")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("FechaSyncConGoogleFit")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("IdCuentaUsuario")
                        .HasColumnType("TEXT");

                    b.Property<int>("IdEntornoSeleccionado")
                        .HasColumnType("INTEGER");

                    b.Property<int>("IdPaisDeResidencia")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Nombre")
                        .HasColumnType("TEXT");

                    b.Property<int>("NumModificaciones")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Ocupacion")
                        .HasColumnType("INTEGER");

                    b.Property<double>("Peso")
                        .HasColumnType("REAL");

                    b.Property<int>("SexoUsuario")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("IdCuentaUsuario")
                        .IsUnique();

                    b.HasIndex("IdEntornoSeleccionado");

                    b.HasIndex("IdPaisDeResidencia");

                    b.ToTable("Perfiles");
                });

            modelBuilder.Entity("ServicioHydrate.Modelos.Producto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Descripcion")
                        .HasMaxLength(300)
                        .HasColumnType("TEXT");

                    b.Property<int>("Disponibles")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Nombre")
                        .HasMaxLength(32)
                        .HasColumnType("TEXT");

                    b.Property<decimal>("PrecioUnitario")
                        .HasColumnType("TEXT");

                    b.Property<string>("UrlImagen")
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Productos");
                });

            modelBuilder.Entity("ServicioHydrate.Modelos.ProductosOrdenados", b =>
                {
                    b.Property<Guid>("IdOrden")
                        .HasColumnType("TEXT");

                    b.Property<int>("IdProducto")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Cantidad")
                        .HasColumnType("INTEGER");

                    b.HasKey("IdOrden", "IdProducto");

                    b.HasIndex("IdProducto");

                    b.ToTable("ProductosOrdenados");
                });

            modelBuilder.Entity("ServicioHydrate.Modelos.RecursoInformativo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Descripcion")
                        .HasMaxLength(300)
                        .HasColumnType("TEXT");

                    b.Property<string>("FechaPublicacion")
                        .HasMaxLength(33)
                        .HasColumnType("TEXT");

                    b.Property<string>("Titulo")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("TEXT");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Recursos");
                });

            modelBuilder.Entity("ServicioHydrate.Modelos.Respuesta", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<Guid?>("AutorId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Contenido")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("TEXT");

                    b.Property<string>("Fecha")
                        .HasMaxLength(33)
                        .HasColumnType("TEXT");

                    b.Property<int>("IdComentario")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Publicado")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("AutorId");

                    b.HasIndex("IdComentario");

                    b.ToTable("Respuestas");
                });

            modelBuilder.Entity("ServicioHydrate.Modelos.TokenFCM", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<int>("IdPerfil")
                        .HasColumnType("INTEGER")
                        .HasColumnName("IdPerfil");

                    b.Property<DateTime>("TimestampGenerado")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("TimestampPersistido")
                        .HasColumnType("TEXT");

                    b.Property<string>("Token")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("IdPerfil")
                        .IsUnique();

                    b.ToTable("TokensFCM");
                });

            modelBuilder.Entity("ServicioHydrate.Modelos.Usuario", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("NombreUsuario")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("TEXT");

                    b.Property<int>("RolDeUsuario")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("Usuarios");
                });

            modelBuilder.Entity("ComentarioUsuario", b =>
                {
                    b.HasOne("ServicioHydrate.Modelos.Comentario", null)
                        .WithMany()
                        .HasForeignKey("ComentariosReportadosId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServicioHydrate.Modelos.Usuario", null)
                        .WithMany()
                        .HasForeignKey("ReportesDeUsuariosId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ComentarioUsuario1", b =>
                {
                    b.HasOne("ServicioHydrate.Modelos.Comentario", null)
                        .WithMany()
                        .HasForeignKey("ComentariosUtilesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServicioHydrate.Modelos.Usuario", null)
                        .WithMany()
                        .HasForeignKey("UtilParaUsuariosId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EntornoPerfil", b =>
                {
                    b.HasOne("ServicioHydrate.Modelos.Entorno", null)
                        .WithMany()
                        .HasForeignKey("EntornosDesbloqueadosId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServicioHydrate.Modelos.Perfil", null)
                        .WithMany()
                        .HasForeignKey("PerfilesQueDesbloquearonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EtiquetaMetaHidratacion", b =>
                {
                    b.HasOne("ServicioHydrate.Modelos.Datos.Etiqueta", null)
                        .WithMany()
                        .HasForeignKey("EtiquetasId", "EtiquetasIdPerfil")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServicioHydrate.Modelos.Datos.MetaHidratacion", null)
                        .WithMany()
                        .HasForeignKey("MetasId", "MetasIdPerfil")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RespuestaUsuario", b =>
                {
                    b.HasOne("ServicioHydrate.Modelos.Respuesta", null)
                        .WithMany()
                        .HasForeignKey("RespuestasUtilesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServicioHydrate.Modelos.Usuario", null)
                        .WithMany()
                        .HasForeignKey("UtilParaUsuariosId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RespuestaUsuario1", b =>
                {
                    b.HasOne("ServicioHydrate.Modelos.Usuario", null)
                        .WithMany()
                        .HasForeignKey("ReportesDeUsuariosId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServicioHydrate.Modelos.Respuesta", null)
                        .WithMany()
                        .HasForeignKey("RespuestasReportadasId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ServicioHydrate.Modelos.Comentario", b =>
                {
                    b.HasOne("ServicioHydrate.Modelos.Usuario", "Autor")
                        .WithMany("Comentarios")
                        .HasForeignKey("AutorId");

                    b.Navigation("Autor");
                });

            modelBuilder.Entity("ServicioHydrate.Modelos.Configuracion", b =>
                {
                    b.HasOne("ServicioHydrate.Modelos.Perfil", "Perfil")
                        .WithOne("Configuracion")
                        .HasForeignKey("ServicioHydrate.Modelos.Configuracion", "IdPerfil")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Perfil");
                });

            modelBuilder.Entity("ServicioHydrate.Modelos.Datos.DatosMedicos", b =>
                {
                    b.HasOne("ServicioHydrate.Modelos.Perfil", "PerfilDeUsuario")
                        .WithMany("RegistrosMedicos")
                        .HasForeignKey("IdPerfil")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PerfilDeUsuario");
                });

            modelBuilder.Entity("ServicioHydrate.Modelos.Datos.Etiqueta", b =>
                {
                    b.HasOne("ServicioHydrate.Modelos.Perfil", "Perfil")
                        .WithMany("Etiquetas")
                        .HasForeignKey("IdPerfil")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Perfil");
                });

            modelBuilder.Entity("ServicioHydrate.Modelos.Datos.MetaHidratacion", b =>
                {
                    b.HasOne("ServicioHydrate.Modelos.Perfil", "Perfil")
                        .WithMany("Metas")
                        .HasForeignKey("IdPerfil")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Perfil");
                });

            modelBuilder.Entity("ServicioHydrate.Modelos.Datos.RegistroDeActividad", b =>
                {
                    b.HasOne("ServicioHydrate.Modelos.Perfil", "Perfil")
                        .WithMany("RegistrosDeActFisica")
                        .HasForeignKey("IdPerfil")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServicioHydrate.Modelos.Datos.TipoDeActividad", "TipoDeActividad")
                        .WithMany("RegistrosDeActividad")
                        .HasForeignKey("IdTipoDeActividad")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Perfil");

                    b.Navigation("TipoDeActividad");
                });

            modelBuilder.Entity("ServicioHydrate.Modelos.Datos.RegistroDeHidratacion", b =>
                {
                    b.HasOne("ServicioHydrate.Modelos.Perfil", "Perfil")
                        .WithMany("RegistrosDeHidratacion")
                        .HasForeignKey("IdPerfil")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Perfil");
                });

            modelBuilder.Entity("ServicioHydrate.Modelos.Datos.ReporteSemanal", b =>
                {
                    b.HasOne("ServicioHydrate.Modelos.Perfil", "Perfil")
                        .WithMany("ReportesSemanales")
                        .HasForeignKey("IdPerfil")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Perfil");
                });

            modelBuilder.Entity("ServicioHydrate.Modelos.Datos.Rutina", b =>
                {
                    b.HasOne("ServicioHydrate.Modelos.Perfil", "Perfil")
                        .WithMany("Rutinas")
                        .HasForeignKey("IdPerfil")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServicioHydrate.Modelos.Datos.RegistroDeActividad", "RegistroDeActividad")
                        .WithOne("Rutina")
                        .HasForeignKey("ServicioHydrate.Modelos.Datos.Rutina", "IdActividad", "IdPerfil")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Perfil");

                    b.Navigation("RegistroDeActividad");
                });

            modelBuilder.Entity("ServicioHydrate.Modelos.LlaveDeApi", b =>
                {
                    b.HasOne("ServicioHydrate.Modelos.Usuario", "Usuario")
                        .WithMany("LlavesDeAPI")
                        .HasForeignKey("IdUsuario")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("ServicioHydrate.Modelos.Orden", b =>
                {
                    b.HasOne("ServicioHydrate.Modelos.Usuario", "Cliente")
                        .WithMany("Ordenes")
                        .HasForeignKey("ClienteId");

                    b.Navigation("Cliente");
                });

            modelBuilder.Entity("ServicioHydrate.Modelos.Perfil", b =>
                {
                    b.HasOne("ServicioHydrate.Modelos.Usuario", "Cuenta")
                        .WithOne("PerfilDeUsuario")
                        .HasForeignKey("ServicioHydrate.Modelos.Perfil", "IdCuentaUsuario")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServicioHydrate.Modelos.Entorno", "EntornoSeleccionado")
                        .WithMany("PerfilesQueSeleccionaron")
                        .HasForeignKey("IdEntornoSeleccionado")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServicioHydrate.Modelos.Pais", "PaisDeResidencia")
                        .WithMany("PerfilesQueResidenEnPais")
                        .HasForeignKey("IdPaisDeResidencia")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cuenta");

                    b.Navigation("EntornoSeleccionado");

                    b.Navigation("PaisDeResidencia");
                });

            modelBuilder.Entity("ServicioHydrate.Modelos.ProductosOrdenados", b =>
                {
                    b.HasOne("ServicioHydrate.Modelos.Orden", "Orden")
                        .WithMany("Productos")
                        .HasForeignKey("IdOrden")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServicioHydrate.Modelos.Producto", "Producto")
                        .WithMany("OrdenesDelProducto")
                        .HasForeignKey("IdProducto")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Orden");

                    b.Navigation("Producto");
                });

            modelBuilder.Entity("ServicioHydrate.Modelos.Respuesta", b =>
                {
                    b.HasOne("ServicioHydrate.Modelos.Usuario", "Autor")
                        .WithMany("Respuestas")
                        .HasForeignKey("AutorId");

                    b.HasOne("ServicioHydrate.Modelos.Comentario", "Comentario")
                        .WithMany("Respuestas")
                        .HasForeignKey("IdComentario")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Autor");

                    b.Navigation("Comentario");
                });

            modelBuilder.Entity("ServicioHydrate.Modelos.TokenFCM", b =>
                {
                    b.HasOne("ServicioHydrate.Modelos.Perfil", "Perfil")
                        .WithOne("TokenFCM")
                        .HasForeignKey("ServicioHydrate.Modelos.TokenFCM", "IdPerfil")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Perfil");
                });

            modelBuilder.Entity("ServicioHydrate.Modelos.Comentario", b =>
                {
                    b.Navigation("Respuestas");
                });

            modelBuilder.Entity("ServicioHydrate.Modelos.Datos.RegistroDeActividad", b =>
                {
                    b.Navigation("Rutina");
                });

            modelBuilder.Entity("ServicioHydrate.Modelos.Datos.TipoDeActividad", b =>
                {
                    b.Navigation("RegistrosDeActividad");
                });

            modelBuilder.Entity("ServicioHydrate.Modelos.Entorno", b =>
                {
                    b.Navigation("PerfilesQueSeleccionaron");
                });

            modelBuilder.Entity("ServicioHydrate.Modelos.Orden", b =>
                {
                    b.Navigation("Productos");
                });

            modelBuilder.Entity("ServicioHydrate.Modelos.Pais", b =>
                {
                    b.Navigation("PerfilesQueResidenEnPais");
                });

            modelBuilder.Entity("ServicioHydrate.Modelos.Perfil", b =>
                {
                    b.Navigation("Configuracion");

                    b.Navigation("Etiquetas");

                    b.Navigation("Metas");

                    b.Navigation("RegistrosDeActFisica");

                    b.Navigation("RegistrosDeHidratacion");

                    b.Navigation("RegistrosMedicos");

                    b.Navigation("ReportesSemanales");

                    b.Navigation("Rutinas");

                    b.Navigation("TokenFCM");
                });

            modelBuilder.Entity("ServicioHydrate.Modelos.Producto", b =>
                {
                    b.Navigation("OrdenesDelProducto");
                });

            modelBuilder.Entity("ServicioHydrate.Modelos.Usuario", b =>
                {
                    b.Navigation("Comentarios");

                    b.Navigation("LlavesDeAPI");

                    b.Navigation("Ordenes");

                    b.Navigation("PerfilDeUsuario");

                    b.Navigation("Respuestas");
                });
#pragma warning restore 612, 618
        }
    }
}
